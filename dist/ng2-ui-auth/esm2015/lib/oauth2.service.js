import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { ConfigService } from './config.service';
import { PopupService } from './popup.service';
import { buildQueryString, expand, getWindowOrigin } from './utils';
import { RedirectService } from './redirect.service';
import { SharedService } from './shared.service';
export class Oauth2Service {
    constructor(http, popup, config, redirect, shared) {
        this.http = http;
        this.popup = popup;
        this.config = config;
        this.redirect = redirect;
        this.shared = shared;
    }
    open(oauthOptions, userData) {
        const authorizationData = this.getAuthorizationData(oauthOptions);
        const url = [oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?');
        if (oauthOptions.doRedirect) {
            return this.redirect.go(url, oauthOptions, authorizationData, userData);
        }
        return this.popup.open(url, oauthOptions, this.config.options.cordova).pipe(switchMap((window) => this.popup.waitForClose(window, this.config.options.cordova, oauthOptions.redirectUri)), switchMap((oauthData) => {
            // when no server URL provided, return popup params as-is.
            // this is for a scenario when someone wishes to opt out from
            // satellizer's magic by doing authorization code exchange and
            // saving a token manually.
            if (oauthOptions.responseType === 'token' || !oauthOptions.url) {
                return of(expand(oauthData));
            }
            if (oauthData.state && oauthData.state !== authorizationData.state) {
                return throwError('OAuth "state" mismatch');
            }
            return this.shared.exchangeForToken(oauthOptions, authorizationData, oauthData, userData);
        }));
    }
    getAuthorizationData(options) {
        const { responseType = 'code', clientId, redirectUri = getWindowOrigin() || '', scopeDelimiter = ',', scope, state, additionalUrlParams } = options;
        const resolvedState = typeof state === 'function' ? state() : state;
        return [
            ['response_type', responseType],
            ['client_id', clientId],
            ['redirect_uri', redirectUri],
            ...(state ? [['state', resolvedState]] : []),
            ...(scope ? [['scope', scope.join(scopeDelimiter)]] : []),
            ...(additionalUrlParams
                ? Object.keys(additionalUrlParams).map(key => {
                    const value = additionalUrlParams[key];
                    if (typeof value === 'string') {
                        return [key, value];
                    }
                    else if (typeof value === 'function') {
                        return [key, value()];
                    }
                    else if (value === null) {
                        return [key, ''];
                    }
                    return ['', ''];
                })
                : [])
        ]
            .filter(_ => !!_[0])
            .reduce((acc, next) => (Object.assign(Object.assign({}, acc), { [next[0]]: next[1] })), {});
    }
}
Oauth2Service.decorators = [
    { type: Injectable }
];
Oauth2Service.ctorParameters = () => [
    { type: HttpClient },
    { type: PopupService },
    { type: ConfigService },
    { type: RedirectService },
    { type: SharedService }
];
//# sourceMappingURL=data:application/json;base64,
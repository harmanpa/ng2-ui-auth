import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { AuthService } from './auth.service';
import { StorageService } from './storage-service';
import { buildQueryString, expand, flatten, getWindowOrigin, parseQueryString, staticify } from './utils';
import { OauthService } from './oauth.service';
import { tap } from 'rxjs/operators';
import { SharedService } from './shared.service';
export class RedirectService {
    constructor(authService, storage, oauth, shared) {
        this.authService = authService;
        this.storage = storage;
        this.oauth = oauth;
        this.shared = shared;
    }
    go(url, options, authorizationData, userData) {
        if (window) {
            const qs = buildQueryString(flatten(staticify({ options, authorizationData, userData })));
            this.storage.set('ng2-ui-auth-REDIRECT', qs, '');
            window.open(url, '_self');
            return of({});
        }
        return throwError('Failed to redirect');
    }
    isRedirect() {
        const options = this.storage.get('ng2-ui-auth-REDIRECT');
        if (options) {
            const w = window;
            const windowOrigin = getWindowOrigin(w);
            const optionsObject = expand(parseQueryString(options))['options'];
            const redirectUri = optionsObject.redirectUri;
            return redirectUri != null && windowOrigin != null
                && (redirectUri.indexOf(windowOrigin) === 0 || windowOrigin.indexOf(redirectUri) === 0)
                && (w.location.search != null || w.location.hash != null);
        }
    }
    handleRedirect() {
        const options = this.storage.get('ng2-ui-auth-REDIRECT');
        if (options) {
            const w = window;
            const windowOrigin = getWindowOrigin(w);
            const data = expand(parseQueryString(options));
            const optionsObject = data['options'];
            const authorizationData = data['authorizationData'];
            const userData = data['userData'];
            const redirectUri = optionsObject.redirectUri;
            if (redirectUri != null && windowOrigin != null
                && (redirectUri.indexOf(windowOrigin) === 0 || windowOrigin.indexOf(redirectUri) === 0)
                && (w.location.search != null || w.location.hash != null)) {
                const queryParams = w.location.search.substring(1).replace(/\/$/, '');
                const hashParams = w.location.hash.substring(1).replace(/[\/$]/, '');
                const hash = parseQueryString(hashParams);
                const qs = parseQueryString(queryParams);
                const allParams = Object.assign(Object.assign({}, qs), hash);
                if (allParams.error) {
                    throw throwError(allParams.error);
                }
                else {
                    return this.oauth.getProvider(optionsObject)
                        .exchangeForToken(optionsObject, authorizationData, allParams, userData)
                        .pipe(tap(response => {
                        this.shared.setToken(response);
                        this.storage.remove('ng2-ui-auth-REDIRECT');
                    }));
                }
            }
            return throwError('Not at valid redirect URI');
        }
        return throwError('No stored options for redirect');
    }
}
RedirectService.decorators = [
    { type: Injectable }
];
RedirectService.ctorParameters = () => [
    { type: AuthService },
    { type: StorageService },
    { type: OauthService },
    { type: SharedService }
];
//# sourceMappingURL=data:application/json;base64,
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, mergeMap, switchMap, tap } from 'rxjs/operators';
import { ConfigService } from './config.service';
import { PopupService } from './popup.service';
import { buildQueryString, joinUrl } from './utils';
import { RedirectService } from './redirect.service';
export class Oauth1Service {
    constructor(http, popup, config, redirect) {
        this.http = http;
        this.popup = popup;
        this.config = config;
        this.redirect = redirect;
    }
    open(oauthOptions, userData) {
        const serverUrl = this.config.options.baseUrl ? joinUrl(this.config.options.baseUrl, oauthOptions.url) : oauthOptions.url;
        if (oauthOptions.doRedirect) {
            return this.http.post(serverUrl, oauthOptions)
                .pipe(mergeMap(authorizationData => this.redirect.go([oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?'), oauthOptions, authorizationData, userData)));
        }
        return this.popup.open('about:blank', oauthOptions, this.config.options.cordova).pipe(switchMap(popupWindow => this.http.post(serverUrl, oauthOptions).pipe(tap(authorizationData => popupWindow
            ? popupWindow.location.replace([oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?'))
            : undefined), switchMap(authorizationData => this.popup
            .waitForClose(popupWindow, this.config.options.cordova, oauthOptions.redirectUri)
            .pipe(map(oauthData => ({ authorizationData, oauthData })))))), switchMap(({ authorizationData, oauthData }) => this.exchangeForToken(oauthOptions, authorizationData, oauthData, userData)));
    }
    exchangeForToken(oauthOptions, authorizationData, oauthData, userData) {
        const body = { oauthOptions, authorizationData, oauthData, userData };
        const { withCredentials, baseUrl } = this.config.options;
        const { method = 'POST', url } = oauthOptions;
        const exchangeForTokenUrl = baseUrl ? joinUrl(baseUrl, url) : url;
        return this.http.request(method, exchangeForTokenUrl, { body, withCredentials });
    }
}
Oauth1Service.decorators = [
    { type: Injectable }
];
Oauth1Service.ctorParameters = () => [
    { type: HttpClient },
    { type: PopupService },
    { type: ConfigService },
    { type: RedirectService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2F1dGgxLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvcGV0ZXIvRGV2ZWxvcG1lbnQvbmcyLXVpLWF1dGgvcHJvamVjdHMvbmcyLXVpLWF1dGgvc3JjLyIsInNvdXJjZXMiOlsibGliL29hdXRoMS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFL0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBR25ELE1BQU0sT0FBTyxhQUFhO0lBQ3hCLFlBQW9CLElBQWdCLEVBQVUsS0FBbUIsRUFBVSxNQUFxQixFQUFVLFFBQXlCO1FBQS9HLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWlCO0lBQ25JLENBQUM7SUFFRCxJQUFJLENBQUMsWUFBNEIsRUFBRSxRQUE2QjtRQUM5RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDO1FBQzFILElBQUksWUFBWSxDQUFDLFVBQVUsRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFnQixTQUFTLEVBQUUsWUFBWSxDQUFDO2lCQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDbEcsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ25GLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBZ0IsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDekQsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FDdEIsV0FBVztZQUNULENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25ILENBQUMsQ0FBQyxTQUFTLENBQ2QsRUFDRCxTQUFTLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUM1QixJQUFJLENBQUMsS0FBSzthQUNQLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUM7YUFDaEYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDNUQsQ0FDRixDQUNGLEVBQ0QsU0FBUyxDQUFDLENBQUMsRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FDM0gsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxZQUE0QixFQUM1QixpQkFBZ0MsRUFDaEMsU0FBd0IsRUFDeEIsUUFBNkI7UUFDNUMsTUFBTSxJQUFJLEdBQUcsRUFBQyxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBQyxDQUFDO1FBQ3BFLE1BQU0sRUFBQyxlQUFlLEVBQUUsT0FBTyxFQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDdkQsTUFBTSxFQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFDLEdBQUcsWUFBWSxDQUFDO1FBQzVDLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDbEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBc0IsTUFBTSxFQUFFLG1CQUFtQixFQUFFLEVBQUMsSUFBSSxFQUFFLGVBQWUsRUFBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQzs7O1lBekNGLFVBQVU7OztZQVhILFVBQVU7WUFPVixZQUFZO1lBRlosYUFBYTtZQUliLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHttYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge0lIaWVyYXJjaGljYWxPYmplY3QsIElPYXV0aDFPcHRpb25zLCBJU2ltcGxlT2JqZWN0fSBmcm9tICcuL2NvbmZpZy1pbnRlcmZhY2VzJztcclxuaW1wb3J0IHtDb25maWdTZXJ2aWNlfSBmcm9tICcuL2NvbmZpZy5zZXJ2aWNlJztcclxuaW1wb3J0IHtJT2F1dGhTZXJ2aWNlfSBmcm9tICcuL29hdXRoLXNlcnZpY2UnO1xyXG5pbXBvcnQge1BvcHVwU2VydmljZX0gZnJvbSAnLi9wb3B1cC5zZXJ2aWNlJztcclxuaW1wb3J0IHtidWlsZFF1ZXJ5U3RyaW5nLCBqb2luVXJsfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHtSZWRpcmVjdFNlcnZpY2V9IGZyb20gJy4vcmVkaXJlY3Quc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBPYXV0aDFTZXJ2aWNlIGltcGxlbWVudHMgSU9hdXRoU2VydmljZTxJT2F1dGgxT3B0aW9ucz4ge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBwb3B1cDogUG9wdXBTZXJ2aWNlLCBwcml2YXRlIGNvbmZpZzogQ29uZmlnU2VydmljZSwgcHJpdmF0ZSByZWRpcmVjdDogUmVkaXJlY3RTZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICBvcGVuKG9hdXRoT3B0aW9uczogSU9hdXRoMU9wdGlvbnMsIHVzZXJEYXRhOiBJSGllcmFyY2hpY2FsT2JqZWN0KTogT2JzZXJ2YWJsZTxJSGllcmFyY2hpY2FsT2JqZWN0PiB7XHJcbiAgICBjb25zdCBzZXJ2ZXJVcmwgPSB0aGlzLmNvbmZpZy5vcHRpb25zLmJhc2VVcmwgPyBqb2luVXJsKHRoaXMuY29uZmlnLm9wdGlvbnMuYmFzZVVybCwgb2F1dGhPcHRpb25zLnVybCkgOiBvYXV0aE9wdGlvbnMudXJsO1xyXG4gICAgaWYgKG9hdXRoT3B0aW9ucy5kb1JlZGlyZWN0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxJU2ltcGxlT2JqZWN0PihzZXJ2ZXJVcmwsIG9hdXRoT3B0aW9ucylcclxuICAgICAgICAucGlwZShtZXJnZU1hcChhdXRob3JpemF0aW9uRGF0YSA9PlxyXG4gICAgICAgICAgdGhpcy5yZWRpcmVjdC5nbyhbb2F1dGhPcHRpb25zLmF1dGhvcml6YXRpb25FbmRwb2ludCwgYnVpbGRRdWVyeVN0cmluZyhhdXRob3JpemF0aW9uRGF0YSldLmpvaW4oJz8nKSxcclxuICAgICAgICAgICAgb2F1dGhPcHRpb25zLCBhdXRob3JpemF0aW9uRGF0YSwgdXNlckRhdGEpKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5wb3B1cC5vcGVuKCdhYm91dDpibGFuaycsIG9hdXRoT3B0aW9ucywgdGhpcy5jb25maWcub3B0aW9ucy5jb3Jkb3ZhKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAocG9wdXBXaW5kb3cgPT5cclxuICAgICAgICB0aGlzLmh0dHAucG9zdDxJU2ltcGxlT2JqZWN0PihzZXJ2ZXJVcmwsIG9hdXRoT3B0aW9ucykucGlwZShcclxuICAgICAgICAgIHRhcChhdXRob3JpemF0aW9uRGF0YSA9PlxyXG4gICAgICAgICAgICBwb3B1cFdpbmRvd1xyXG4gICAgICAgICAgICAgID8gcG9wdXBXaW5kb3cubG9jYXRpb24ucmVwbGFjZShbb2F1dGhPcHRpb25zLmF1dGhvcml6YXRpb25FbmRwb2ludCwgYnVpbGRRdWVyeVN0cmluZyhhdXRob3JpemF0aW9uRGF0YSldLmpvaW4oJz8nKSlcclxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIHN3aXRjaE1hcChhdXRob3JpemF0aW9uRGF0YSA9PlxyXG4gICAgICAgICAgICB0aGlzLnBvcHVwXHJcbiAgICAgICAgICAgICAgLndhaXRGb3JDbG9zZShwb3B1cFdpbmRvdywgdGhpcy5jb25maWcub3B0aW9ucy5jb3Jkb3ZhLCBvYXV0aE9wdGlvbnMucmVkaXJlY3RVcmkpXHJcbiAgICAgICAgICAgICAgLnBpcGUobWFwKG9hdXRoRGF0YSA9PiAoe2F1dGhvcml6YXRpb25EYXRhLCBvYXV0aERhdGF9KSkpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICApLFxyXG4gICAgICBzd2l0Y2hNYXAoKHthdXRob3JpemF0aW9uRGF0YSwgb2F1dGhEYXRhfSkgPT4gdGhpcy5leGNoYW5nZUZvclRva2VuKG9hdXRoT3B0aW9ucywgYXV0aG9yaXphdGlvbkRhdGEsIG9hdXRoRGF0YSwgdXNlckRhdGEpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGV4Y2hhbmdlRm9yVG9rZW4ob2F1dGhPcHRpb25zOiBJT2F1dGgxT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25EYXRhOiBJU2ltcGxlT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgb2F1dGhEYXRhOiBJU2ltcGxlT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgdXNlckRhdGE6IElIaWVyYXJjaGljYWxPYmplY3QpOiBPYnNlcnZhYmxlPElIaWVyYXJjaGljYWxPYmplY3Q+IHtcclxuICAgIGNvbnN0IGJvZHkgPSB7b2F1dGhPcHRpb25zLCBhdXRob3JpemF0aW9uRGF0YSwgb2F1dGhEYXRhLCB1c2VyRGF0YX07XHJcbiAgICBjb25zdCB7d2l0aENyZWRlbnRpYWxzLCBiYXNlVXJsfSA9IHRoaXMuY29uZmlnLm9wdGlvbnM7XHJcbiAgICBjb25zdCB7bWV0aG9kID0gJ1BPU1QnLCB1cmx9ID0gb2F1dGhPcHRpb25zO1xyXG4gICAgY29uc3QgZXhjaGFuZ2VGb3JUb2tlblVybCA9IGJhc2VVcmwgPyBqb2luVXJsKGJhc2VVcmwsIHVybCkgOiB1cmw7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3Q8SUhpZXJhcmNoaWNhbE9iamVjdD4obWV0aG9kLCBleGNoYW5nZUZvclRva2VuVXJsLCB7Ym9keSwgd2l0aENyZWRlbnRpYWxzfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==
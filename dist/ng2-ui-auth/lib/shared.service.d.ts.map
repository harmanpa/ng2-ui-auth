{"version":3,"file":"shared.service.d.ts","sources":["shared.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { StorageType } from './storage-type.enum';\r\nimport { Observable } from 'rxjs';\r\nimport { StorageService } from './storage-service';\r\nimport { ConfigService } from './config.service';\r\nimport { IHierarchicalObject, IOauthOptions, ISimpleObject } from './config-interfaces';\r\nimport { HttpClient } from '@angular/common/http';\r\nexport declare class SharedService {\r\n    private storage;\r\n    private config;\r\n    private http;\r\n    tokenName: string;\r\n    constructor(storage: StorageService, config: ConfigService, http: HttpClient);\r\n    getToken(): string | null;\r\n    getPayload(token?: string): any;\r\n    setToken(response: string | any): void;\r\n    removeToken(): void;\r\n    isAuthenticated(token?: string): boolean;\r\n    getExpirationDate(token?: string): Date | null;\r\n    logout(): Observable<any>;\r\n    setStorageType(type: StorageType): boolean;\r\n    exchangeForToken(oauthOptions: IOauthOptions, authorizationData: ISimpleObject, oauthData: ISimpleObject, userData: IHierarchicalObject): Observable<IHierarchicalObject>;\r\n    private b64DecodeUnicode;\r\n}\r\n"]}
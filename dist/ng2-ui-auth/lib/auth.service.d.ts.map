{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { LocalService } from './local.service';\r\nimport { OauthService } from './oauth.service';\r\nimport { SharedService } from './shared.service';\r\nimport { StorageType } from './storage-type.enum';\r\nimport { IHierarchicalObject } from './config-interfaces';\r\nexport declare class AuthService {\r\n    private shared;\r\n    private local;\r\n    private oauth;\r\n    constructor(shared: SharedService, local: LocalService, oauth: OauthService);\r\n    login(user: string | IHierarchicalObject, url?: string): Observable<IHierarchicalObject>;\r\n    signup(user: string | IHierarchicalObject, url?: string): Observable<IHierarchicalObject>;\r\n    logout(): Observable<void>;\r\n    authenticate(name: string, userData?: IHierarchicalObject): Observable<IHierarchicalObject>;\r\n    link(name: string, userData?: IHierarchicalObject): Observable<IHierarchicalObject>;\r\n    unlink<T = any>(provider: string, url?: string): Observable<T>;\r\n    isAuthenticated(): boolean;\r\n    getToken(): string | null;\r\n    setToken(token: string | object): void;\r\n    removeToken(): void;\r\n    getPayload(): any;\r\n    setStorageType(type: StorageType): boolean;\r\n    getExpirationDate(): Date | null;\r\n}\r\n"]}